---
"$id": "task.Task"
type: object
title: Task model
description: Simple task operation model
required:
- id
- assignee
- summary
- content
- tags
- status
additionalProperties: true
# q - searchstring
fulltextsearch: true
filter:
  statusHistoryDateFrom:
    "$id": "#/filter/statusHistoryDateFrom"
    type: string
    title: Status history date from
    description: Status history date from
    example:
    - '2020-01-05T14:48:00.000Z'
  statusHistoryDateTo:
    "$id": "#/filter/statusHistoryDateTo"
    type: string
    title: Status history date to
    description: Status history date to
    example:
    - '2020-01-05T14:48:00.000Z'
  statusHistoryStatus:
    "$id": "#/filter/statusHistoryStatus"
    type: string
    title: status name
    default: ''
    example:
    - 'TODO'
    description: status name
properties:
  id:
    "$id": "#/properties/id"
    type: string
    title: The id schema
    description: An explanation about the purpose of this instance.
    default: ''
    example:
    - T-123
    filter: base
    sorting: true
  assignee:
    "$id": "#/properties/assignee"
    type: string
    title: Assignee
    description: Assignee
    default: ''
    example:
    - 'username'
    filter: base
    sorting: true
  summary:
    "$id": "#/properties/summary"
    type: string
    title: Summary
    description: An explanation about the purpose of this instance.
    default: ''
    example:
    - Task summary
    filter: base
    sorting: true
  content:
    "$id": "#/properties/content"
    type: string
    title: The content schema
    description: An explanation about the purpose of this instance.
    default: ''
    example:
    - Task content
    filter: base
    sorting: true
  tags:
    "$id": "#/properties/tags"
    type: array
    title: The tags schema
    description: An explanation about the purpose of this instance.
    default: []
    example:
    - - b2b
      - b2c
    items:
      type: string
      enum:
      - b2b
      - b2c
    filter: base
  actions:
    "$id": "#/properties/actions"
    type: array
    title: actions
    description: actions
    filter: base
    # "#wrappedWith": paginationModel
    api:
      get: # -> TASK_ACTIONS_GET
        rest_type: get
        request: 
          "$ref": "task.Actions.GetRequest" # -> {..., items: [model], pagination: {}}
          # "#wrappedWith": standardPaginationModel
        response:
          "$ref": "task.Actions.GetResponse" # -> {..., items: [model], pagination: {}}
          # "#wrappedWith": standardPaginationModel
      add: # -> TASK_ACTIONS_ADD
        rest_type: post
        request:
          "$ref": "task.Actions.AddRequest" # -> {..., items: [model], ...}}
          # "#wrappedWith": standardRequestModel
        response:
          "$ref": "common.standardOkResponse" # -> {status: 'ok', error: ''}
      update: # -> TASK_ACTIONS_UPDATE
        rest_type: patch
        request:
          "$ref": "task.Actions.UpdateRequest" # -> {..., items: [model], ...}
          # "#wrappedWith": standardRequestModel
        response:
          "$ref": "common.standardOkResponse" # -> {status: 'ok', error: ''}
      cancel: # -> TASK_ACTIONS_CANCEL
        rest_type: post
        request:
          "$ref": "task.Actions.CancelRequest" # -> {..., items: [model], pagination: {}}
          # "#wrappedWith": standardRequestModel
        response:
          "$ref": "common.standardOkResponse" # -> {status: 'ok', error: ''}
      delete: # -> TASK_ACTIONS_DELETE
        rest_type: delete
        request:
          "$ref": "task.Actions.DeleteRequest" # -> {..., items: [model], pagination: {}}
          # "#wrappedWith": standardRequestModel
        response:
          "$ref": "common.standardOkResponse" # -> {status: 'ok', error: ''}
  status:
    "$id": "#/properties/status"
    type: string
    title: status
    description: status
    filter: base
